import type { Question } from "../../types"

const bfsQuestion: Question = {
  category: "algorithms",
  level: "Medium",
  solution:
    "export function bfs<T>(graph: Map<T, T[]>, startNode: T): T[] {\n  const visited = new Set<T>()\n  const queue: T[] = []\n  const result: T[] = []\n\n  if (!graph.has(startNode)) {\n    return result\n  }\n\n  visited.add(startNode)\n  queue.push(startNode)\n\n  while (queue.length > 0) {\n    const currentNode = queue.shift()!\n    result.push(currentNode)\n\n    const neighbors = graph.get(currentNode)\n    if (neighbors) {\n      for (const neighbor of neighbors) {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor)\n          queue.push(neighbor)\n        }\n      }\n    }\n  }\n  return result\n}",
  synopsis:
    "Breadth-First Search (BFS)\n\nWhat is Breadth-First Search (BFS)?\n\nBreadth-First Search (BFS) is a graph traversal algorithm that systematically explores all the vertices of a graph or tree level by level. It starts at a specified source vertex and explores all of its immediate neighbors first, then moves to the next level of neighbors (neighbors of neighbors), and so on. This process continues until all reachable vertices have been visited.\n\nHow it Works:\n\nBFS uses a queue data structure to manage the order of vertices to be visited. The general steps are as follows:\n\n1.  **Initialization:**\n    *   Create an empty queue and add the starting vertex to it.\n    *   Create a set or array to keep track of visited vertices to avoid cycles and redundant processing. Mark the starting vertex as visited.\n    *   Create a list to store the order of visited vertices (the result of the BFS).\n\n2.  **Traversal:**\n    *   While the queue is not empty:\n        *   Dequeue a vertex from the front of the queue. This is the `current` vertex.\n        *   Add the `current` vertex to the result list.\n        *   For each unvisited neighbor of the `current` vertex:\n            *   Mark the neighbor as visited.\n            *   Enqueue the neighbor.\n\n3.  **Termination:** The algorithm terminates when the queue becomes empty, indicating that all reachable vertices have been visited.\n\nKey Characteristics:\n\n*   **Level-by-Level Exploration:** BFS explores all nodes at the current depth level before moving on to nodes at the next depth level.\n*   **Shortest Path in Unweighted Graphs:** BFS is guaranteed to find the shortest path (in terms of number of edges) from the starting node to any other reachable node in an unweighted graph.\n*   **Data Structure:** It primarily uses a queue (FIFO - First-In, First-Out) to manage the order of exploration.\n\nHow to Implement it (Conceptual Steps):\n\n1.  **Function Signature:** Define a function `bfs(graph, startNode)` that takes the graph (e.g., an adjacency list) and the starting node as input.\n2.  **Visited Set:** Initialize an empty `Set` called `visited` to keep track of nodes that have already been processed.\n3.  **Queue:** Initialize an empty `Queue` and `enqueue` the `startNode`. Add `startNode` to the `visited` set.\n4.  **Result Array:** Initialize an empty array `result` to store the order of visited nodes.\n5.  **Loop:** Start a `while` loop that continues as long as the queue is not empty.\n6.  **Dequeue and Process:** Inside the loop, `dequeue` a `currentNode` from the queue. Add `currentNode` to the `result` array.\n7.  **Explore Neighbors:** Get all neighbors of the `currentNode` from the `graph`. Iterate through these neighbors.\n8.  **Visit Unvisited Neighbors:** For each `neighbor`, if it has not been `visited`:\n    *   Add the `neighbor` to the `visited` set.\n    *   `enqueue` the `neighbor` into the queue.\n9.  **Return Result:** After the loop finishes, return the `result` array.\n\nHints:\n\n*   **Graph Representation:** BFS can be applied to graphs represented using adjacency lists (more common and efficient for sparse graphs) or adjacency matrices. The provided solution uses a `Map` to represent an adjacency list.\n*   **Avoiding Cycles:** The `visited` set is crucial to prevent infinite loops in graphs that contain cycles.\n*   **Applications:** BFS is used in various algorithms and applications, including:\n    *   Finding the shortest path in unweighted graphs.\n    *   Web crawlers (exploring links level by level).\n    *   Social networking (finding friends of friends).\n    *   Garbage collection (marking reachable objects).\n    *   Network broadcasting.\n    *   Finding connected components in a graph.",
  title: "Breadth-First Search (BFS)",
}

export default bfsQuestion
