import type { Question } from "../../types"

const binarySearchQuestion: Question = {
  category: "algorithms",
  level: "Easy",
  name: "Binary Search",
  solution:
    "function binarySearch<T extends number | string>(arr: T[], target: T): number {\n  let left = 0\n  let right = arr.length - 1\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2)\n\n    if (arr[mid] === target) {\n      return mid\n    } else if (arr[mid]! < target) {\n      left = mid + 1\n    } else {\n      right = mid - 1\n    }\n  }\n\n  return -1\n}\n\nexport default binarySearch",
  synopsis:
    "Binary Search\n\nWhat is Binary Search?\n\nBinary Search is an efficient algorithm for finding a specific item within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the search key is less than the item in the middle of the interval, the algorithm narrows the interval to the lower half. Otherwise, it narrows it to the upper half. This process continues until the value is found or the interval is empty.\n\nHow it Works:\n\nBinary Search operates on the principle of 'divide and conquer'. Here's a step-by-step breakdown:\n\n1.  **Initialization:**\n    *   Define a `low` pointer at the beginning of the array (index 0).\n    *   Define a `high` pointer at the end of the array (index `array.length - 1`).\n\n2.  **Iteration:**\n    *   While `low` is less than or equal to `high`:\n        *   Calculate the `mid` index: `mid = floor((low + high) / 2)`.\n        *   Compare the element at `arr[mid]` with the `target` value:\n            *   If `arr[mid]` is equal to `target`, the item is found. Return `mid`.\n            *   If `arr[mid]` is less than `target`, the `target` must be in the right half. Update `low = mid + 1`.\n            *   If `arr[mid]` is greater than `target`, the `target` must be in the left half. Update `high = mid - 1`.\n\n3.  **Termination:** If the loop finishes and the `target` is not found (i.e., `low` becomes greater than `high`), return -1 (or a similar indicator that the item was not found).\n\nKey Characteristics:\n\n*   **Requires Sorted Data:** Binary Search *only* works on sorted data. If the input array is not sorted, the algorithm will not guarantee correct results.\n*   **Time Complexity:** Its time complexity is O(log n), which makes it significantly faster than linear search (O(n)) for large datasets. This logarithmic complexity arises because the search space is halved in each step.\n*   **Space Complexity:** The space complexity is O(1) for the iterative approach, as it only uses a few variables.\n\nHow to Implement it (Conceptual Steps):\n\n1.  **Function Signature:** Define a function `binarySearch(arr, target)` that takes a sorted array `arr` and the `target` value as input.\n2.  **Pointers:** Initialize `left = 0` and `right = arr.length - 1`.\n3.  **Loop:** Use a `while` loop with the condition `left <= right`.\n4.  **Midpoint Calculation:** Inside the loop, calculate `mid = Math.floor((left + right) / 2)`.\n5.  **Comparison:** Implement the conditional logic:\n    *   If `arr[mid] === target`, return `mid`.\n    *   If `arr[mid] < target`, set `left = mid + 1`.\n    *   Else (if `arr[mid] > target`), set `right = mid - 1`.\n6.  **Not Found:** If the loop completes, return -1.\n\nHints:\n\n*   **Integer Overflow:** When calculating `mid`, be mindful of potential integer overflow if `left` and `right` are very large. A safer way to calculate `mid` is `left + floor((right - left) / 2)`.\n*   **Recursive vs. Iterative:** Binary search can be implemented recursively or iteratively. The iterative approach is generally preferred in production code due to avoiding potential stack overflow issues with very large arrays and often having better performance characteristics.\n*   **Variations:** Binary search can be adapted to find the first or last occurrence of an element, or to find the smallest element greater than or equal to a target, etc.",
}

export default binarySearchQuestion
