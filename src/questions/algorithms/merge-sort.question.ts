import type { Question } from "../../types"

const mergeSortQuestion: Question = {
  category: "algorithms",
  level: "Medium",
  solution:
    "function mergeSort<T>(arr: T[]): T[] {\n  if (arr.length <= 1) {\n    return arr\n  }\n\n  const mid = Math.floor(arr.length / 2)\n  const left = arr.slice(0, mid)\n  const right = arr.slice(mid)\n\n  return merge(mergeSort(left), mergeSort(right))\n}\n\nfunction merge<T>(left: T[], right: T[]): T[] {\n  const result: T[] = []\n  let leftIndex = 0\n  let rightIndex = 0\n\n  while (leftIndex < left.length && rightIndex < right.length) {\n    if (left[leftIndex]! < right[rightIndex]!) {\n      result.push(left[leftIndex]!)\n      leftIndex++\n    } else {\n      result.push(right[rightIndex]!)\n      rightIndex++\n    }\n  }\n\n  return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex))\n}\n\nexport default mergeSort",
  synopsis:
    "Merge Sort\n\nWhat is Merge Sort?\n\nMerge Sort is an efficient, comparison-based sorting algorithm that follows the divide-and-conquer paradigm. It works by recursively dividing an unsorted list into `n` sublists, each containing one element (a list of one element is considered sorted). Then, it repeatedly merges sublists to produce new sorted sublists until there is only one sorted sublist remaining, which is the sorted version of the original list.\n\nHow it Works:\n\nMerge Sort consists of two main phases:\n\n1.  **Divide:** The unsorted list is recursively divided into two halves until each sublist contains only one element. A single-element list is inherently sorted.\n\n2.  **Conquer (Merge):** The sorted sublists are repeatedly merged to produce new sorted sublists. This merging process is crucial:\n    *   It takes two already sorted sublists as input.\n    *   It compares the first elements of both sublists.\n    *   The smaller element is moved to a new, merged list.\n    *   This process continues until all elements from both sublists are moved to the merged list.\n    *   The result is a single, sorted list.\n\nThis merging continues upwards until all the divided sublists are merged back into a single, fully sorted list.\n\nKey Characteristics:\n\n*   **Divide and Conquer:** It's a classic example of this algorithmic paradigm.\n*   **Stable Sort:** Merge Sort is a stable sorting algorithm, meaning that if two elements have equal values, their relative order in the input array is preserved in the sorted output.\n*   **Time Complexity:** It has a time complexity of O(n log n) in all cases (best, average, and worst). This makes it a very reliable and efficient sorting algorithm for large datasets.\n*   **Space Complexity:** The space complexity is O(n) because it requires an auxiliary array for merging the sublists.\n\nHow to Implement it (Conceptual Steps):\n\n1.  **`mergeSort(arr)` Function:**\n    *   **Base Case:** If the array `arr` has 0 or 1 element, it's already sorted, so return `arr`.\n    *   **Divide:** Calculate the middle index (`mid`). Divide `arr` into two halves: `left` (from index 0 to `mid-1`) and `right` (from index `mid` to end).\n    *   **Conquer:** Recursively call `mergeSort(left)` and `mergeSort(right)` to sort the two halves.\n    *   **Combine:** Call a `merge(leftSorted, rightSorted)` helper function to combine the two sorted halves into a single sorted array, and return the result.\n\n2.  **`merge(left, right)` Function (Helper):**\n    *   Initialize an empty `result` array.\n    *   Initialize two pointers, `leftIndex = 0` and `rightIndex = 0`.\n    *   **Comparison Loop:** While `leftIndex` is within bounds of `left` and `rightIndex` is within bounds of `right`:\n        *   Compare `left[leftIndex]` and `right[rightIndex]`.\n        *   Append the smaller element to `result` and increment its respective pointer.\n    *   **Append Remaining:** After the loop, one of the arrays might still have remaining elements. Append all remaining elements from `left` (if any) and `right` (if any) to `result`.\n    *   Return `result`.\n\nHints:\n\n*   **Recursion:** Understanding recursion is key to implementing the `mergeSort` function.\n*   **Merging Logic:** The `merge` function is the core of the algorithm. Ensure it correctly combines two sorted arrays into one.\n*   **Auxiliary Space:** Remember that Merge Sort requires additional space for the temporary arrays used during the merging process.\n*   **Applications:** Merge Sort is often used for external sorting (when data is too large to fit into memory) and for parallel sorting because the divide step can be easily parallelized.",
  title: "Merge Sort",
}

export default mergeSortQuestion
