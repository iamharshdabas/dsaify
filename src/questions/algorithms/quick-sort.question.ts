import type { Question } from "../../types"

const quickSortQuestion: Question = {
  category: "algorithms",
  level: "Medium",
  name: "Quick Sort",
  solution:
    "function quickSort<T extends number | string>(arr: T[], low: number = 0, high: number = arr.length - 1): T[] {\n  if (low < high) {\n    const pivotIndex = partition(arr, low, high)\n    quickSort(arr, low, pivotIndex - 1)\n    quickSort(arr, pivotIndex + 1, high)\n  }\n  return arr\n}\n\nfunction partition<T extends number | string>(arr: T[], low: number, high: number): number {\n  const pivot = arr[high]!\n  let i = low - 1\n\n  for (let j = low; j < high; j++) {\n    if (arr[j]! <= pivot) {\n      i++\n      ;[arr[i]!, arr[j]!] = [\n        arr[j]!,\n        arr[i]!,\n      ] // Swap\n    }\n  }\n\n  ;[arr[i + 1]!, arr[high]!] = [\n    arr[high]!,\n    arr[i + 1]!,\n  ]\n  return i + 1\n}\n\nexport default quickSort",
  synopsis:
    "Quick Sort\n\nWhat is Quick Sort?\n\nQuick Sort is an efficient, comparison-based sorting algorithm that also follows the divide-and-conquer paradigm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively. This process is repeated until the entire array is sorted.\n\nHow it Works:\n\nQuick Sort involves three main steps:\n\n1.  **Choose a Pivot:** Select an element from the array to be the pivot. The choice of pivot can significantly impact performance. Common strategies include choosing the first, last, middle, or a random element.\n\n2.  **Partition:** Rearrange the array such that all elements less than the pivot come before it, and all elements greater than the pivot come after it. Elements equal to the pivot can go on either side. After partitioning, the pivot is in its final sorted position.\n\n3.  **Recurse:** Recursively apply the above two steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values.\n\nThis process continues until the sub-arrays are small enough (e.g., contain 0 or 1 element), at which point they are considered sorted.\n\nKey Characteristics:\n\n*   **Divide and Conquer:** Like Merge Sort, it's a divide-and-conquer algorithm.\n*   **In-Place (typically):** Quick Sort is typically implemented as an in-place sorting algorithm, meaning it sorts the array by modifying the original array directly, requiring only a small amount of auxiliary space (O(log n) on average for the recursion stack).\n*   **Time Complexity:**\n    *   **Average Case:** O(n log n). This is generally very fast in practice.\n    *   **Worst Case:** O(n^2). This occurs when the pivot selection consistently leads to highly unbalanced partitions (e.g., always picking the smallest or largest element as the pivot in an already sorted array). Randomizing the pivot choice can mitigate this.\n*   **Unstable Sort:** Quick Sort is generally an unstable sorting algorithm, meaning that the relative order of equal elements might not be preserved.\n\nHow to Implement it (Conceptual Steps - In-Place):\n\n1.  **`quickSort(arr, low, high)` Function:**\n    *   **Base Case:** If `low >= high`, the sub-array has 0 or 1 element and is already sorted, so return.\n    *   **Partition:** Call a `partition(arr, low, high)` helper function. This function will select a pivot, rearrange elements, and return the `pivotIndex` (the final sorted position of the pivot).\n    *   **Recurse:** Recursively call `quickSort(arr, low, pivotIndex - 1)` for the left sub-array.\n    *   Recursively call `quickSort(arr, pivotIndex + 1, high)` for the right sub-array.\n\n2.  **`partition(arr, low, high)` Function (Helper):**\n    *   **Choose Pivot:** Select a pivot (e.g., `arr[high]`).\n    *   **Initialize `i`:** Set `i = low - 1` (this pointer will track the boundary of elements smaller than the pivot).\n    *   **Iterate `j`:** Loop `j` from `low` to `high - 1`:\n        *   If `arr[j]` is less than or equal to the `pivot`:\n            *   Increment `i`.\n            *   Swap `arr[i]` and `arr[j]`.\n    *   **Place Pivot:** Swap `arr[i + 1]` and `arr[high]` (the pivot).\n    *   **Return Pivot Index:** Return `i + 1`.\n\nHints:\n\n*   **Pivot Selection:** The choice of pivot strategy is important. A common practice is to pick a random pivot or use the median-of-three approach to reduce the chance of worst-case scenarios.\n*   **In-Place Swapping:** The `partition` function relies on efficient in-place swapping of elements.\n*   **Recursion Depth:** For very large arrays, deep recursion can lead to stack overflow. In such cases, an iterative Quick Sort or a hybrid approach (e.g., switching to Insertion Sort for small sub-arrays) might be considered.\n*   **Applications:** Quick Sort is widely used for general-purpose sorting due to its excellent average-case performance and in-place nature.",
}

export default quickSortQuestion
