Hash Table

What is a Hash Table?

A hash table, also known as a hash map, is a data structure that implements an associative array abstract data type, a structure that can map keys to values. A hash table uses a hash function to compute an index, also called a hash code, into an array of buckets or slots, from which the desired value can be found.

How it Works:

- A hash table is an array of a fixed size. Each slot in the array is a bucket that can store one or more key-value pairs.
- The `hash` function takes a key as input and returns an index into the array. A good hash function should distribute the keys as evenly as possible across the buckets to minimize collisions.
- When a key-value pair is added, the hash function is used to determine the bucket where the pair should be stored. If the bucket is empty, the pair is added. If the bucket already contains one or more pairs (a collision), the new pair is added to the bucket using a collision resolution technique, such as chaining.
- To retrieve a value, the hash function is used to find the bucket, and then the bucket is searched for the key.

How to Implement it:

1.  **HashTable Class:** Create a `HashTable` class with a `table` property (an array) and a `size` property.
2.  **`hash` Method:**
    - Implement a hash function that takes a key and returns an index within the bounds of the table size.
3.  **`set` Method:**
    - Hash the key to get an index.
    - If the bucket at the index is empty, create a new array (bucket).
    - Check if the key already exists in the bucket. If so, update the value.
    - Otherwise, add the new key-value pair to the bucket.
4.  **`get` Method:**
    - Hash the key to get an index.
    - Search the bucket at the index for the key and return the corresponding value if found.
5.  **`delete` Method:**
    - Hash the key to get an index.
    - Search the bucket at the index for the key and remove the key-value pair if found.

Hints:

- The choice of hash function is crucial for the performance of a hash table. A good hash function should be fast to compute and should distribute the keys evenly.
- Collision resolution is a key part of hash table implementation. Chaining (storing a linked list of key-value pairs in each bucket) is a common and effective technique.
- The load factor of a hash table (the number of entries divided by the number of buckets) affects its performance. If the load factor becomes too high, the performance will degrade. In such cases, the table should be resized.
