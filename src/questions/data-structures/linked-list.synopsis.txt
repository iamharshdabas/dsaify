Linked List

What is a Linked List?

A linked list is a linear data structure that consists of a sequence of nodes, where each node contains a value and a pointer to the next node in the sequence. Unlike arrays, linked lists do not store elements in contiguous memory locations. This allows for dynamic resizing and efficient insertion and deletion operations at the cost of slower access to elements.

How it Works:

- Each node in a linked list is an object with two properties: `value` and `next`.
- The list maintains a `head` pointer to the first node in the list.
- To add a new node, you traverse the list until you reach the last node, and then set the `next` pointer of the last node to the new node.
- To find a node, you traverse the list from the `head`, following the `next` pointers until you find the desired value or reach the end of the list.
- To delete a node, you find the node to be deleted and update the `next` pointer of the previous node to point to the next node of the deleted node.

How to Implement it:

1.  **Node Class:** Create a `Node` class with properties for `value` and `next`.
2.  **LinkedList Class:** Create a `LinkedList` class with a `head` property and a `length` property.
3.  **`add` Method:**
    - Create a new node.
    - If the list is empty, set the `head` to the new node.
    - Otherwise, traverse to the end of the list and set the `next` of the last node to the new node.
4.  **`find` Method:**
    - Traverse the list from the `head`, comparing the `value` of each node with the target value.
5.  **`delete` Method:**
    - Handle the case where the node to be deleted is the `head`.
    - Otherwise, find the node before the one to be deleted and update its `next` pointer.

Hints:

- Keep track of the `length` of the list to provide a `size` method with O(1) time complexity.
- Be careful to handle the edge case of an empty list.
- The `find` method is a useful helper for the `delete` method.
- For a more efficient implementation of adding to the tail, you can maintain a `tail` pointer in the `LinkedList` class.
