Stack

What is a Stack?

A stack is a linear data structure that follows the Last-In, First-Out (LIFO) principle. This means that the last element added to the stack will be the first one to be removed. It is analogous to a stack of plates, where you can only add or remove plates from the top.

How it Works:

- A stack has two main operations: `push` and `pop`.
- `push`: Adds an element to the top of the stack.
- `pop`: Removes an element from the top of the stack.
- A `peek` operation is often included to view the element at the top of the stack without removing it.
- Stacks can be implemented using arrays or linked lists.

How to Implement it:

1.  **Stack Class:** Create a `Stack` class with an `items` property, which is an array.
2.  **`push` Method:**
    - Use the `push` method of the array to add an element to the end (top).
3.  **`pop` Method:**
    - Use the `pop` method of the array to remove and return the last element.
4.  **`peek` Method:**
    - Return the last element of the array.
5.  **Helper Methods:**
    - `isEmpty`: Checks if the stack is empty.
    - `size`: Returns the number of elements in the stack.

Hints:

- Using an array to implement a stack is very efficient, as the `push` and `pop` operations on an array have a time complexity of O(1).
- Stacks are used in a wide variety of applications, including function call management (the call stack), expression evaluation (e.g., converting infix to postfix notation), and backtracking algorithms like Depth-First Search (DFS).
